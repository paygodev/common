// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: api/zamtel/zamtel.proto

package zamtel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ZamtelService_ZamtelCollection_FullMethodName       = "/api.ZamtelService/ZamtelCollection"
	ZamtelService_ZamtelCollectionStatus_FullMethodName = "/api.ZamtelService/ZamtelCollectionStatus"
)

// ZamtelServiceClient is the client API for ZamtelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZamtelServiceClient interface {
	ZamtelCollection(ctx context.Context, in *MMPCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error)
	ZamtelCollectionStatus(ctx context.Context, in *CollectionStatusRequest, opts ...grpc.CallOption) (*CollectionStatusResponse, error)
}

type zamtelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZamtelServiceClient(cc grpc.ClientConnInterface) ZamtelServiceClient {
	return &zamtelServiceClient{cc}
}

func (c *zamtelServiceClient) ZamtelCollection(ctx context.Context, in *MMPCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, ZamtelService_ZamtelCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zamtelServiceClient) ZamtelCollectionStatus(ctx context.Context, in *CollectionStatusRequest, opts ...grpc.CallOption) (*CollectionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionStatusResponse)
	err := c.cc.Invoke(ctx, ZamtelService_ZamtelCollectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZamtelServiceServer is the server API for ZamtelService service.
// All implementations must embed UnimplementedZamtelServiceServer
// for forward compatibility
type ZamtelServiceServer interface {
	ZamtelCollection(context.Context, *MMPCollectionRequest) (*CollectionResponse, error)
	ZamtelCollectionStatus(context.Context, *CollectionStatusRequest) (*CollectionStatusResponse, error)
	mustEmbedUnimplementedZamtelServiceServer()
}

// UnimplementedZamtelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZamtelServiceServer struct {
}

func (UnimplementedZamtelServiceServer) ZamtelCollection(context.Context, *MMPCollectionRequest) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZamtelCollection not implemented")
}
func (UnimplementedZamtelServiceServer) ZamtelCollectionStatus(context.Context, *CollectionStatusRequest) (*CollectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZamtelCollectionStatus not implemented")
}
func (UnimplementedZamtelServiceServer) mustEmbedUnimplementedZamtelServiceServer() {}

// UnsafeZamtelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZamtelServiceServer will
// result in compilation errors.
type UnsafeZamtelServiceServer interface {
	mustEmbedUnimplementedZamtelServiceServer()
}

func RegisterZamtelServiceServer(s grpc.ServiceRegistrar, srv ZamtelServiceServer) {
	s.RegisterService(&ZamtelService_ServiceDesc, srv)
}

func _ZamtelService_ZamtelCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MMPCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZamtelServiceServer).ZamtelCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZamtelService_ZamtelCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZamtelServiceServer).ZamtelCollection(ctx, req.(*MMPCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZamtelService_ZamtelCollectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZamtelServiceServer).ZamtelCollectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZamtelService_ZamtelCollectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZamtelServiceServer).ZamtelCollectionStatus(ctx, req.(*CollectionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZamtelService_ServiceDesc is the grpc.ServiceDesc for ZamtelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZamtelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ZamtelService",
	HandlerType: (*ZamtelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZamtelCollection",
			Handler:    _ZamtelService_ZamtelCollection_Handler,
		},
		{
			MethodName: "ZamtelCollectionStatus",
			Handler:    _ZamtelService_ZamtelCollectionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/zamtel/zamtel.proto",
}
