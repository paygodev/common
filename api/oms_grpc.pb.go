// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: api/oms.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CollectionService_CreateCollection_FullMethodName = "/api.CollectionService/CreateCollection"
	CollectionService_UpdateCollection_FullMethodName = "/api.CollectionService/UpdateCollection"
)

// CollectionServiceClient is the client API for CollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionServiceClient interface {
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error)
	UpdateCollection(ctx context.Context, in *CollectionResponse, opts ...grpc.CallOption) (*CollectionResponse, error)
}

type collectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionServiceClient(cc grpc.ClientConnInterface) CollectionServiceClient {
	return &collectionServiceClient{cc}
}

func (c *collectionServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollection(ctx context.Context, in *CollectionResponse, opts ...grpc.CallOption) (*CollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_UpdateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionServiceServer is the server API for CollectionService service.
// All implementations must embed UnimplementedCollectionServiceServer
// for forward compatibility
type CollectionServiceServer interface {
	CreateCollection(context.Context, *CreateCollectionRequest) (*CollectionResponse, error)
	UpdateCollection(context.Context, *CollectionResponse) (*CollectionResponse, error)
	mustEmbedUnimplementedCollectionServiceServer()
}

// UnimplementedCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionServiceServer struct {
}

func (UnimplementedCollectionServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollection(context.Context, *CollectionResponse) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedCollectionServiceServer) mustEmbedUnimplementedCollectionServiceServer() {}

// UnsafeCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServiceServer will
// result in compilation errors.
type UnsafeCollectionServiceServer interface {
	mustEmbedUnimplementedCollectionServiceServer()
}

func RegisterCollectionServiceServer(s grpc.ServiceRegistrar, srv CollectionServiceServer) {
	s.RegisterService(&CollectionService_ServiceDesc, srv)
}

func _CollectionService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_UpdateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, req.(*CollectionResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionService_ServiceDesc is the grpc.ServiceDesc for CollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CollectionService",
	HandlerType: (*CollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _CollectionService_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _CollectionService_UpdateCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}

const (
	AuthService_Authntication_FullMethodName = "/api.AuthService/Authntication"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Authntication(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Authntication(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthService_Authntication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Authntication(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Authntication(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authntication not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Authntication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Authntication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Authntication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Authntication(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authntication",
			Handler:    _AuthService_Authntication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}

const (
	AirtelAuthService_AirtelAuth_FullMethodName = "/api.AirtelAuthService/AirtelAuth"
)

// AirtelAuthServiceClient is the client API for AirtelAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirtelAuthServiceClient interface {
	AirtelAuth(ctx context.Context, in *AirtelAuthRequest, opts ...grpc.CallOption) (*AirtelAuthResponse, error)
}

type airtelAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirtelAuthServiceClient(cc grpc.ClientConnInterface) AirtelAuthServiceClient {
	return &airtelAuthServiceClient{cc}
}

func (c *airtelAuthServiceClient) AirtelAuth(ctx context.Context, in *AirtelAuthRequest, opts ...grpc.CallOption) (*AirtelAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirtelAuthResponse)
	err := c.cc.Invoke(ctx, AirtelAuthService_AirtelAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirtelAuthServiceServer is the server API for AirtelAuthService service.
// All implementations must embed UnimplementedAirtelAuthServiceServer
// for forward compatibility
type AirtelAuthServiceServer interface {
	AirtelAuth(context.Context, *AirtelAuthRequest) (*AirtelAuthResponse, error)
	mustEmbedUnimplementedAirtelAuthServiceServer()
}

// UnimplementedAirtelAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirtelAuthServiceServer struct {
}

func (UnimplementedAirtelAuthServiceServer) AirtelAuth(context.Context, *AirtelAuthRequest) (*AirtelAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirtelAuth not implemented")
}
func (UnimplementedAirtelAuthServiceServer) mustEmbedUnimplementedAirtelAuthServiceServer() {}

// UnsafeAirtelAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirtelAuthServiceServer will
// result in compilation errors.
type UnsafeAirtelAuthServiceServer interface {
	mustEmbedUnimplementedAirtelAuthServiceServer()
}

func RegisterAirtelAuthServiceServer(s grpc.ServiceRegistrar, srv AirtelAuthServiceServer) {
	s.RegisterService(&AirtelAuthService_ServiceDesc, srv)
}

func _AirtelAuthService_AirtelAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirtelAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirtelAuthServiceServer).AirtelAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirtelAuthService_AirtelAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirtelAuthServiceServer).AirtelAuth(ctx, req.(*AirtelAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirtelAuthService_ServiceDesc is the grpc.ServiceDesc for AirtelAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirtelAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AirtelAuthService",
	HandlerType: (*AirtelAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AirtelAuth",
			Handler:    _AirtelAuthService_AirtelAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}

const (
	AirtelCollectionService_AirtelCollection_FullMethodName = "/api.AirtelCollectionService/AirtelCollection"
)

// AirtelCollectionServiceClient is the client API for AirtelCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirtelCollectionServiceClient interface {
	AirtelCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*AirtelCollectionResponse, error)
}

type airtelCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirtelCollectionServiceClient(cc grpc.ClientConnInterface) AirtelCollectionServiceClient {
	return &airtelCollectionServiceClient{cc}
}

func (c *airtelCollectionServiceClient) AirtelCollection(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*AirtelCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirtelCollectionResponse)
	err := c.cc.Invoke(ctx, AirtelCollectionService_AirtelCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirtelCollectionServiceServer is the server API for AirtelCollectionService service.
// All implementations must embed UnimplementedAirtelCollectionServiceServer
// for forward compatibility
type AirtelCollectionServiceServer interface {
	AirtelCollection(context.Context, *CollectionRequest) (*AirtelCollectionResponse, error)
	mustEmbedUnimplementedAirtelCollectionServiceServer()
}

// UnimplementedAirtelCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirtelCollectionServiceServer struct {
}

func (UnimplementedAirtelCollectionServiceServer) AirtelCollection(context.Context, *CollectionRequest) (*AirtelCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirtelCollection not implemented")
}
func (UnimplementedAirtelCollectionServiceServer) mustEmbedUnimplementedAirtelCollectionServiceServer() {
}

// UnsafeAirtelCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirtelCollectionServiceServer will
// result in compilation errors.
type UnsafeAirtelCollectionServiceServer interface {
	mustEmbedUnimplementedAirtelCollectionServiceServer()
}

func RegisterAirtelCollectionServiceServer(s grpc.ServiceRegistrar, srv AirtelCollectionServiceServer) {
	s.RegisterService(&AirtelCollectionService_ServiceDesc, srv)
}

func _AirtelCollectionService_AirtelCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirtelCollectionServiceServer).AirtelCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirtelCollectionService_AirtelCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirtelCollectionServiceServer).AirtelCollection(ctx, req.(*CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirtelCollectionService_ServiceDesc is the grpc.ServiceDesc for AirtelCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirtelCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AirtelCollectionService",
	HandlerType: (*AirtelCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AirtelCollection",
			Handler:    _AirtelCollectionService_AirtelCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}

const (
	CollectionStatusService_UpdateCollectionStatus_FullMethodName = "/api.CollectionStatusService/UpdateCollectionStatus"
)

// CollectionStatusServiceClient is the client API for CollectionStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionStatusServiceClient interface {
	UpdateCollectionStatus(ctx context.Context, in *CollectionStatusResponse, opts ...grpc.CallOption) (*CollectionStatusResponse, error)
}

type collectionStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionStatusServiceClient(cc grpc.ClientConnInterface) CollectionStatusServiceClient {
	return &collectionStatusServiceClient{cc}
}

func (c *collectionStatusServiceClient) UpdateCollectionStatus(ctx context.Context, in *CollectionStatusResponse, opts ...grpc.CallOption) (*CollectionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionStatusResponse)
	err := c.cc.Invoke(ctx, CollectionStatusService_UpdateCollectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionStatusServiceServer is the server API for CollectionStatusService service.
// All implementations must embed UnimplementedCollectionStatusServiceServer
// for forward compatibility
type CollectionStatusServiceServer interface {
	UpdateCollectionStatus(context.Context, *CollectionStatusResponse) (*CollectionStatusResponse, error)
	mustEmbedUnimplementedCollectionStatusServiceServer()
}

// UnimplementedCollectionStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionStatusServiceServer struct {
}

func (UnimplementedCollectionStatusServiceServer) UpdateCollectionStatus(context.Context, *CollectionStatusResponse) (*CollectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionStatus not implemented")
}
func (UnimplementedCollectionStatusServiceServer) mustEmbedUnimplementedCollectionStatusServiceServer() {
}

// UnsafeCollectionStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionStatusServiceServer will
// result in compilation errors.
type UnsafeCollectionStatusServiceServer interface {
	mustEmbedUnimplementedCollectionStatusServiceServer()
}

func RegisterCollectionStatusServiceServer(s grpc.ServiceRegistrar, srv CollectionStatusServiceServer) {
	s.RegisterService(&CollectionStatusService_ServiceDesc, srv)
}

func _CollectionStatusService_UpdateCollectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionStatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionStatusServiceServer).UpdateCollectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionStatusService_UpdateCollectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionStatusServiceServer).UpdateCollectionStatus(ctx, req.(*CollectionStatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionStatusService_ServiceDesc is the grpc.ServiceDesc for CollectionStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CollectionStatusService",
	HandlerType: (*CollectionStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCollectionStatus",
			Handler:    _CollectionStatusService_UpdateCollectionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}

const (
	AirtelCollectionStatusService_AirtelCollectionStatus_FullMethodName = "/api.AirtelCollectionStatusService/AirtelCollectionStatus"
)

// AirtelCollectionStatusServiceClient is the client API for AirtelCollectionStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirtelCollectionStatusServiceClient interface {
	AirtelCollectionStatus(ctx context.Context, in *CollectionStatusRequest, opts ...grpc.CallOption) (*AirtelCollectionStatusResponse, error)
}

type airtelCollectionStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirtelCollectionStatusServiceClient(cc grpc.ClientConnInterface) AirtelCollectionStatusServiceClient {
	return &airtelCollectionStatusServiceClient{cc}
}

func (c *airtelCollectionStatusServiceClient) AirtelCollectionStatus(ctx context.Context, in *CollectionStatusRequest, opts ...grpc.CallOption) (*AirtelCollectionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AirtelCollectionStatusResponse)
	err := c.cc.Invoke(ctx, AirtelCollectionStatusService_AirtelCollectionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirtelCollectionStatusServiceServer is the server API for AirtelCollectionStatusService service.
// All implementations must embed UnimplementedAirtelCollectionStatusServiceServer
// for forward compatibility
type AirtelCollectionStatusServiceServer interface {
	AirtelCollectionStatus(context.Context, *CollectionStatusRequest) (*AirtelCollectionStatusResponse, error)
	mustEmbedUnimplementedAirtelCollectionStatusServiceServer()
}

// UnimplementedAirtelCollectionStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirtelCollectionStatusServiceServer struct {
}

func (UnimplementedAirtelCollectionStatusServiceServer) AirtelCollectionStatus(context.Context, *CollectionStatusRequest) (*AirtelCollectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirtelCollectionStatus not implemented")
}
func (UnimplementedAirtelCollectionStatusServiceServer) mustEmbedUnimplementedAirtelCollectionStatusServiceServer() {
}

// UnsafeAirtelCollectionStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirtelCollectionStatusServiceServer will
// result in compilation errors.
type UnsafeAirtelCollectionStatusServiceServer interface {
	mustEmbedUnimplementedAirtelCollectionStatusServiceServer()
}

func RegisterAirtelCollectionStatusServiceServer(s grpc.ServiceRegistrar, srv AirtelCollectionStatusServiceServer) {
	s.RegisterService(&AirtelCollectionStatusService_ServiceDesc, srv)
}

func _AirtelCollectionStatusService_AirtelCollectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirtelCollectionStatusServiceServer).AirtelCollectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AirtelCollectionStatusService_AirtelCollectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirtelCollectionStatusServiceServer).AirtelCollectionStatus(ctx, req.(*CollectionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirtelCollectionStatusService_ServiceDesc is the grpc.ServiceDesc for AirtelCollectionStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirtelCollectionStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AirtelCollectionStatusService",
	HandlerType: (*AirtelCollectionStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AirtelCollectionStatus",
			Handler:    _AirtelCollectionStatusService_AirtelCollectionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms.proto",
}
